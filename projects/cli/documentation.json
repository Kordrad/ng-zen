{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "ZenAvatarComponent",
      "id": "component-ZenAvatarComponent-4df759231d66d3f8cc9321e00adaa26ec9d295e6a54d9a5e96fbe49012d7aaeea3338bff80ee2bf556b082d8e8b0b534bdb0a58fbaec73fce3514378f7959537",
      "file": "projects/cli/schematics/components/files/avatar/avatar.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "zen-avatar",
      "styleUrls": [],
      "styles": [],
      "template": "@if (src()) {\n  <img [ngSrc]=\"src()\" alt=\"\" fill />\n} @else {\n  <ng-content />\n}\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "src",
          "defaultValue": "input<string>('')",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Path to the image source. If the <code>src</code> is provided, an image element will be rendered.\nOtherwise, the content projected into this component will be displayed.</p>\n",
          "line": 59,
          "rawdescription": "\n\nPath to the image source. If the `src` is provided, an image element will be rendered.\nOtherwise, the content projected into this component will be displayed.\n\n",
          "modifierKind": [148],
          "jsdoctags": [
            {
              "pos": 1528,
              "end": 1546,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 334,
              "tagName": {
                "pos": 1529,
                "end": 1536,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "default"
              },
              "comment": "<p>&#39;&#39;</p>\n"
            },
            {
              "pos": 1546,
              "end": 1559,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 334,
              "tagName": {
                "pos": 1547,
                "end": 1552,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "input"
              },
              "comment": ""
            },
            {
              "pos": 1559,
              "end": 1571,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 351,
              "tagName": {
                "pos": 1560,
                "end": 1564,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "type"
              },
              "comment": "",
              "typeExpression": {
                "pos": 1565,
                "end": 1571,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 316,
                "type": {
                  "pos": 1565,
                  "end": 1571,
                  "flags": 16777216,
                  "modifierFlagsCache": 0,
                  "transformFlags": 1,
                  "kind": 154
                }
              }
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "NgOptimizedImage"
        }
      ],
      "description": "<p>A component to display an avatar image. If a valid image source URL is provided,\nit will render an image element. Otherwise, it will display projected content.</p>\n<p>The component uses Angular&#39;s optimized image directives for enhanced performance.</p>\n<p>Usage:</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;!-- If an image source is provided, it will display the image --&gt;\n&lt;zen-avatar [src]=&quot;&#39;/path/to/image.jpg&#39;&quot; /&gt;\n\n&lt;!-- If no image source is provided, it will display the projected content --&gt;\n&lt;zen-avatar&gt; A &lt;/zen-avatar&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-avatar src=&quot;https://picsum.photos/32&quot; /&gt;</code></pre></div>",
      "rawdescription": "\n\nA component to display an avatar image. If a valid image source URL is provided,\nit will render an image element. Otherwise, it will display projected content.\n\nThe component uses Angular's optimized image directives for enhanced performance.\n\nUsage:\n\n```html\n<!-- If an image source is provided, it will display the image -->\n<zen-avatar [src]=\"'/path/to/image.jpg'\" />\n\n<!-- If no image source is provided, it will display the projected content -->\n<zen-avatar> A </zen-avatar>\n```\n\n```html\n<zen-avatar src=\"https://picsum.photos/32\" />\n```\n\n",
      "type": "component",
      "sourceCode": "import { NgOptimizedImage } from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\n\r\n/**\r\n * A component to display an avatar image. If a valid image source URL is provided,\r\n * it will render an image element. Otherwise, it will display projected content.\r\n *\r\n * The component uses Angular's optimized image directives for enhanced performance.\r\n *\r\n * Usage:\r\n *\r\n * ```html\r\n * <!-- If an image source is provided, it will display the image -->\r\n * <zen-avatar [src]=\"'/path/to/image.jpg'\" />\r\n *\r\n * <!-- If no image source is provided, it will display the projected content -->\r\n * <zen-avatar> A </zen-avatar>\r\n * ```\r\n *\r\n * @example\r\n * <zen-avatar src=\"https://picsum.photos/32\" />\r\n *\r\n * @component\r\n * @selector `zen-avatar`\r\n *\r\n * @license BSD-2-Clause\r\n * @author Konrad Stępień <kord.stp@gmail.com>\r\n * @link https://github.com/Kordrad/ng-zen\r\n */\r\n@Component({\r\n  selector: 'zen-avatar',\r\n  standalone: true,\r\n  imports: [NgOptimizedImage],\r\n  template: `\r\n    @if (src()) {\r\n      <img [ngSrc]=\"src()\" alt=\"\" fill />\r\n    } @else {\r\n      <ng-content />\r\n    }\r\n  `,\r\n  styleUrl: './avatar.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZenAvatarComponent {\r\n  /**\r\n   * Path to the image source. If the `src` is provided, an image element will be rendered.\r\n   * Otherwise, the content projected into this component will be displayed.\r\n   *\r\n   * @default ''\r\n   * @input\r\n   * @type string\r\n   */\r\n  readonly src = input<string>('');\r\n}\r\n",
      "styleUrl": "./avatar.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "ZenBadgeComponent",
      "id": "component-ZenBadgeComponent-a18ab634c6366fa273ca9d843ead3428f0cbcd0e6d5fd1a38812e1ce541e8586140a7cf0e6cbadc828bc2c5a6990c3e0c96963ae31ac8e82bdb3e31a069359ed",
      "file": "projects/cli/schematics/components/files/badge/badge.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "zen-badge,[zenBadge]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content />\n<ng-content select=\"[topLeft]\" />\n<ng-content select=\"[top]\" />\n<ng-content select=\"[topRight]\" />\n<ng-content select=\"[left]\" />\n<ng-content select=\"[right]\" />\n<ng-content select=\"[bottomLeft]\" />\n<ng-content select=\"[bottom]\" />\n<ng-content select=\"[bottomRight]\" />\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "<p>ZenBadgeComponent is a versatile Angular component used to display badges or indicators\nin various positions within its parent container. It allows for flexible placement\nof badge content such as icons, text, or other elements in the top-left, top,\ntop-right, left, right, bottom-left, bottom, and bottom-right positions.</p>\n<p>This component offers standalone usage and is highly customizable through its\ntemplate and styling. It leverages Angular&#39;s change detection strategy &#39;OnPush&#39;\nfor optimal performance.</p>\n<p>Additionally, it provides support for CSS variables to customize badge positioning</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-css\">--zen-badge-offset: unset; // Controls the overall offset of the badge\n--zen-badge-offset-x: unset; // Controls the horizontal offset of the badge.\n--zen-badge-offset-y: unset; // Controls the vertical offset of the badge.</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
      "rawdescription": "\n\nZenBadgeComponent is a versatile Angular component used to display badges or indicators\nin various positions within its parent container. It allows for flexible placement\nof badge content such as icons, text, or other elements in the top-left, top,\ntop-right, left, right, bottom-left, bottom, and bottom-right positions.\n\nThis component offers standalone usage and is highly customizable through its\ntemplate and styling. It leverages Angular's change detection strategy 'OnPush'\nfor optimal performance.\n\nAdditionally, it provides support for CSS variables to customize badge positioning\n\n```css\n--zen-badge-offset: unset; // Controls the overall offset of the badge\n--zen-badge-offset-x: unset; // Controls the horizontal offset of the badge.\n--zen-badge-offset-y: unset; // Controls the vertical offset of the badge.\n```\n\n```html\n```\n\n",
      "type": "component",
      "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\n\r\n/**\r\n * ZenBadgeComponent is a versatile Angular component used to display badges or indicators\r\n * in various positions within its parent container. It allows for flexible placement\r\n * of badge content such as icons, text, or other elements in the top-left, top,\r\n * top-right, left, right, bottom-left, bottom, and bottom-right positions.\r\n *\r\n * This component offers standalone usage and is highly customizable through its\r\n * template and styling. It leverages Angular's change detection strategy 'OnPush'\r\n * for optimal performance.\r\n *\r\n * Additionally, it provides support for CSS variables to customize badge positioning\r\n *\r\n * ```css\r\n * --zen-badge-offset: unset; // Controls the overall offset of the badge\r\n * --zen-badge-offset-x: unset; // Controls the horizontal offset of the badge.\r\n * --zen-badge-offset-y: unset; // Controls the vertical offset of the badge.\r\n * ```\r\n *\r\n * @example <zen-badge> Text <span bottom>🦆</span></zen-badge>\r\n *\r\n * @component\r\n * @selector `zen-badge`,`[zenBadge]`\r\n *\r\n * @license BSD-2-Clause\r\n * @author Konrad Stępień <kord.stp@gmail.com>\r\n * @link https://github.com/Kordrad/ng-zen\r\n */\r\n@Component({\r\n  selector: 'zen-badge,[zenBadge]',\r\n  standalone: true,\r\n  template: `\r\n    <ng-content />\r\n    <ng-content select=\"[topLeft]\" />\r\n    <ng-content select=\"[top]\" />\r\n    <ng-content select=\"[topRight]\" />\r\n    <ng-content select=\"[left]\" />\r\n    <ng-content select=\"[right]\" />\r\n    <ng-content select=\"[bottomLeft]\" />\r\n    <ng-content select=\"[bottom]\" />\r\n    <ng-content select=\"[bottomRight]\" />\r\n  `,\r\n  styleUrl: './badge.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZenBadgeComponent {}\r\n",
      "styleUrl": "./badge.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "ZenButtonComponent",
      "id": "component-ZenButtonComponent-b57be6c72da78739ffa0850c3009283a68cdcfd6519985ac31cd93a481f54cef4a5c24052327138402f5398ac7f529d014ec2393601f61bf48c51fd096aeae52",
      "file": "projects/cli/schematics/components/files/button/button.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "button[zen-button], a[zen-button]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content />",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  // eslint-disable-next-line @angular-eslint/component-selector\r\n  selector: 'button[zen-button], a[zen-button]',\r\n  standalone: true,\r\n  template: ` <ng-content /> `,\r\n  styleUrl: './button.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZenButtonComponent {}\r\n",
      "styleUrl": "./button.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "ZenCheckboxComponent",
      "id": "component-ZenCheckboxComponent-216417c00778117fe5b1d5df6a9e67f7cfac3b2c938db28e63854366ae0fb6a7d09c689d8b84aec2445c75482aa49e734b7787ec2210252c12ba2a25dca568bd",
      "file": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ZenCheckboxComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "zen-checkbox",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./checkbox.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "checked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the checked state of the checkbox.</p>\n",
          "line": 60,
          "rawdescription": "\nModel for the checked state of the checkbox.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the disabled state of the checkbox.</p>\n",
          "line": 63,
          "rawdescription": "\nModel for the disabled state of the checkbox.",
          "modifierKind": [148],
          "required": false
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "checked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the checked state of the checkbox.</p>\n",
          "line": 60,
          "rawdescription": "\nModel for the checked state of the checkbox.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the disabled state of the checkbox.</p>\n",
          "line": 63,
          "rawdescription": "\nModel for the disabled state of the checkbox.",
          "modifierKind": [148],
          "required": false
        },
        {
          "name": "onChange",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "OnChangeFn",
          "optional": false,
          "description": "",
          "line": 87,
          "modifierKind": [123]
        },
        {
          "name": "onTouched",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "OnTouchedFn",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "initIndeterminate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nInitializes the indeterminate state of the checkbox based on the checked state.\nIf the checked state is 'mixed', the checkbox will be set to indeterminate.\n",
          "description": "<p>Initializes the indeterminate state of the checkbox based on the checked state.\nIf the checked state is &#39;mixed&#39;, the checkbox will be set to indeterminate.</p>\n",
          "modifierKind": [123]
        },
        {
          "name": "onToggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 122,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nToggles the checkbox value and notifies the change.\nIf the component is disabled, no action is performed.\n",
          "description": "<p>Toggles the checkbox value and notifies the change.\nIf the component is disabled, no action is performed.</p>\n"
        },
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "OnChangeFn",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRegisters a function to be called when the value changes.\n",
          "description": "<p>Registers a function to be called when the value changes.</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "OnChangeFn",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "OnTouchedFn",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nRegisters a function to be called when the component is touched.\n",
          "description": "<p>Registers a function to be called when the component is touched.</p>\n",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "OnTouchedFn",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nSets the disabled state of the component.\n",
          "description": "<p>Sets the disabled state of the component.</p>\n",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWrites a new value to the component.\n",
          "description": "<p>Writes a new value to the component.</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "<p>ZenCheckboxComponent is a custom checkbox component implementing ControlValueAccessor.\nIt supports a tri-state checkbox (checked, unchecked, and indeterminate).</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-checkbox /&gt;</code></pre></div>",
      "rawdescription": "\n\nZenCheckboxComponent is a custom checkbox component implementing ControlValueAccessor.\nIt supports a tri-state checkbox (checked, unchecked, and indeterminate).\n\n```html\n<zen-checkbox />\n```\n\n",
      "type": "component",
      "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  DestroyRef,\n  ElementRef,\n  forwardRef,\n  inject,\n  model,\n  Renderer2,\n  viewChild,\n} from '@angular/core';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { map } from 'rxjs';\n\ntype CheckedState = boolean | 'mixed';\ntype OnChangeFn = (value: CheckedState) => void;\ntype OnTouchedFn = () => void;\n\n/**\n * ZenCheckboxComponent is a custom checkbox component implementing ControlValueAccessor.\n * It supports a tri-state checkbox (checked, unchecked, and indeterminate).\n *\n * @example\n * <zen-checkbox />\n *\n * @export\n * @class ZenCheckboxComponent\n * @implements {ControlValueAccessor}\n * @implements {AfterViewInit}\n *\n * @license BSD-2-Clause\n * @author Konrad Stępień\n * @link https://github.com/Kordrad/ng-zen\n */\n@Component({\n  selector: 'zen-checkbox',\n  standalone: true,\n  templateUrl: './checkbox.component.html',\n  styleUrl: './checkbox.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ZenCheckboxComponent),\n      multi: true,\n    },\n  ],\n  imports: [FormsModule],\n})\nexport class ZenCheckboxComponent\n  implements ControlValueAccessor, AfterViewInit\n{\n  /** Model for the checked state of the checkbox. */\n  readonly checked = model<CheckedState>(false);\n\n  /** Model for the disabled state of the checkbox. */\n  readonly disabled = model<boolean>(false);\n\n  /** @ignore */\n  private readonly checked$ = toObservable(this.checked);\n\n  /** @ignore */\n  private readonly destroyRef = inject(DestroyRef);\n  /** @ignore */\n  private readonly renderer2 = inject(Renderer2);\n\n  /** @ignore */\n  private readonly inputElement =\n    viewChild<ElementRef<HTMLInputElement>>('inputElement');\n\n  /**\n   * Lifecycle hook called after Angular has fully initialized a component's view.\n   * Initializes the indeterminate state of the checkbox.\n   *\n   * @ignore\n   */\n  ngAfterViewInit(): void {\n    this.initIndeterminate();\n  }\n\n  private onChange: OnChangeFn = () => {};\n  private onTouched: OnTouchedFn = () => {};\n\n  /**\n   * Writes a new value to the component.\n   */\n  writeValue(value: boolean): void {\n    this.checked.set(value);\n  }\n\n  /**\n   * Registers a function to be called when the value changes.\n   */\n  registerOnChange(fn: OnChangeFn): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a function to be called when the component is touched.\n   */\n  registerOnTouched(fn: OnTouchedFn): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the component.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled.set(isDisabled);\n  }\n\n  /**\n   * Toggles the checkbox value and notifies the change.\n   * If the component is disabled, no action is performed.\n   */\n  onToggle(): void {\n    if (this.disabled()) return;\n\n    this.checked.update(value => !value);\n    this.onChange(this.checked());\n    this.onTouched();\n  }\n\n  /**\n   * Initializes the indeterminate state of the checkbox based on the checked state.\n   * If the checked state is 'mixed', the checkbox will be set to indeterminate.\n   */\n  private initIndeterminate(): void {\n    this.checked$\n      .pipe(\n        takeUntilDestroyed(this.destroyRef),\n        map((value: CheckedState) => value === 'mixed')\n      )\n      .subscribe((value: boolean) => {\n        this.renderer2.setProperty(\n          this.inputElement()?.nativeElement,\n          'indeterminate',\n          value\n        );\n      });\n  }\n}\n",
      "styleUrl": "./checkbox.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "implements": ["ControlValueAccessor", "AfterViewInit"],
      "templateData": "<input\n  #inputElement\n  [attr.aria-checked]=\"checked()\"\n  [checked]=\"checked()\"\n  [attr.aria-disabled]=\"disabled()\"\n  [disabled]=\"disabled()\"\n  (change)=\"onToggle()\"\n  (keydown.enter)=\"onToggle()\"\n  type=\"checkbox\"\n/>\n@switch (checked()) {\n  @case (false) {\n    ✕\n  }\n  @case (true) {\n    ✓\n  }\n  @case ('mixed') {\n    -\n  }\n}\n"
    },
    {
      "name": "ZenPinComponent",
      "id": "component-ZenPinComponent-f5995968e7f450be263b72b602e2f2a0c3f7d7630e6e99318ffec6b45f0f168dfb6727dad03038c4bf305c20da200cbb0a9a17c294c83c6074dfe3f195106be7",
      "file": "projects/cli/schematics/components/files/pin/pin.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "zen-pin",
      "styleUrls": [],
      "styles": [],
      "template": "",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "stream",
          "defaultValue": "input<boolean, boolean | 'true' | 'false' | ''>(false, {\r\n    transform: booleanAttribute,\r\n  })",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Displays waving stream animation</p>\n",
          "line": 38,
          "rawdescription": "\n\nDisplays waving stream animation\n",
          "modifierKind": [148]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [
        {
          "name": "class.stream",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "any",
          "decorators": []
        }
      ],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "<p>The ZenPinComponent represents a simple visual pin with a circular shape.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-pin /&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
      "rawdescription": "\n\nThe ZenPinComponent represents a simple visual pin with a circular shape.\n\n```html\n<zen-pin />\n```\n\n```html\n```\n",
      "type": "component",
      "sourceCode": "import {\r\n  booleanAttribute,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\n\r\n/**\r\n * The ZenPinComponent represents a simple visual pin with a circular shape.\r\n *\r\n * ```html\r\n * <zen-pin />\r\n * ```\r\n *\r\n * @example <zen-pin />\r\n * @component\r\n * @selector `zen-pin`\r\n *\r\n * @license BSD-2-Clause\r\n * @author Konrad Stępień <kord.stp@gmail.com>\r\n * @link https://github.com/Kordrad/ng-zen\r\n */\r\n@Component({\r\n  selector: 'zen-pin',\r\n  standalone: true,\r\n  imports: [],\r\n  template: ``,\r\n  styleUrl: './pin.component.scss',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZenPinComponent {\r\n  /**\r\n   * Displays waving stream animation\r\n   */\r\n  readonly stream = input<boolean, boolean | 'true' | 'false' | ''>(false, {\r\n    transform: booleanAttribute,\r\n  });\r\n\r\n  @HostBinding('class.stream')\r\n  get classStream() {\r\n    return this.stream();\r\n  }\r\n}\r\n",
      "styleUrl": "./pin.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "classStream": {
          "name": "classStream",
          "getSignature": {
            "name": "classStream",
            "type": "",
            "returnType": "",
            "line": 43
          }
        }
      }
    },
    {
      "name": "ZenSwitchComponent",
      "id": "component-ZenSwitchComponent-21e95cc2e3474841d1c6f7e7a582730c45ab9c4a7c663d7477f13f5743cf4a4d22fc82bb499058cf33bd9c31d718eb985536e23a764783804840010e33d1aa86",
      "file": "projects/cli/schematics/components/files/switch/zen-switch.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ZenSwitchComponent), multi: true,\n}",
          "type": "component"
        }
      ],
      "selector": "zen-switch",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./zen-switch.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "checked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the checked state of the switch.</p>\n",
          "line": 46,
          "rawdescription": "\nModel for the checked state of the switch.",
          "required": false
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the disabled state of the switch.</p>\n",
          "line": 49,
          "rawdescription": "\nModel for the disabled state of the switch.",
          "required": false
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "checked",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the checked state of the switch.</p>\n",
          "line": 46,
          "rawdescription": "\nModel for the checked state of the switch.",
          "required": false
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "<p>Model for the disabled state of the switch.</p>\n",
          "line": 49,
          "rawdescription": "\nModel for the disabled state of the switch.",
          "required": false
        }
      ],
      "methodsClass": [
        {
          "name": "onKeyDown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHandles keyboard events for accessibility.\n",
          "description": "<p>Handles keyboard events for accessibility.</p>\n",
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onToggle",
          "args": [
            {
              "name": "check",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nToggles the switch value and notifies the change.\n",
          "description": "<p>Toggles the switch value and notifies the change.</p>\n",
          "jsdoctags": [
            {
              "name": "check",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "FormsModule",
          "type": "module"
        }
      ],
      "description": "<p>ZenSwitchComponent is a custom switch component that implements ControlValueAccessor to work seamlessly with Angular forms.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
      "rawdescription": "\n\nZenSwitchComponent is a custom switch component that implements ControlValueAccessor to work seamlessly with Angular forms.\n\n```html\n```\n\n",
      "type": "component",
      "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  forwardRef,\n  model,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\n\ntype OnChangeFn = (value: boolean) => void;\ntype OnTouchedFn = () => void;\n\n/**\n * ZenSwitchComponent is a custom switch component that implements ControlValueAccessor to work seamlessly with Angular forms.\n *\n * @example <zen-switch />\n *\n * @export\n * @class ZenSwitchComponent\n * @implements {ControlValueAccessor}\n *\n * @license BSD-2-Clause\n * @author Konrad Stępień <kord.stp@gmail.com>\n * @link https://github.com/Kordrad/ng-zen\n */\n@Component({\n  selector: 'zen-switch',\n  standalone: true,\n  templateUrl: './zen-switch.component.html',\n  styleUrl: './zen-switch.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ZenSwitchComponent),\n      multi: true,\n    },\n  ],\n  imports: [FormsModule],\n})\nexport class ZenSwitchComponent implements ControlValueAccessor {\n  /** Model for the checked state of the switch. */\n  checked = model<boolean>(false);\n\n  /** Model for the disabled state of the switch. */\n  disabled = model<boolean>(false);\n\n  /** @ignore */\n  private onChange: OnChangeFn = () => {};\n  /** @ignore */\n  private onTouched: OnTouchedFn = () => {};\n\n  /**\n   * Writes a new value to the component.\n   * @ignore\n   */\n  writeValue(value: boolean): void {\n    this.checked.set(value);\n  }\n\n  /**\n   * Registers a function to be called when the value changes.\n   * @ignore\n   */\n  registerOnChange(fn: OnChangeFn): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Registers a function to be called when the component is touched.\n   * @ignore\n   */\n  registerOnTouched(fn: OnTouchedFn): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the component.\n   * @ignore\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled.set(isDisabled);\n  }\n\n  /**\n   * Toggles the switch value and notifies the change.\n   */\n  onToggle(check?: boolean): void {\n    if (this.disabled()) return;\n\n    const value = check ?? !this.checked();\n\n    this.checked.set(value);\n    this.onChange(value);\n    this.onTouched();\n  }\n\n  /**\n   * Handles keyboard events for accessibility.\n   */\n  onKeyDown(event: KeyboardEvent): void {\n    switch (event.code) {\n      case 'Enter':\n      case 'Space': {\n        event.preventDefault();\n        this.onToggle();\n        break;\n      }\n      case 'ArrowRight': {\n        this.onToggle(true);\n        break;\n      }\n      case 'ArrowLeft': {\n        this.onToggle(false);\n        break;\n      }\n    }\n  }\n}\n",
      "styleUrl": "./zen-switch.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "implements": ["ControlValueAccessor"],
      "templateData": "<button\r\n  class=\"switch\"\r\n  [attr.aria-checked]=\"checked()\"\r\n  [attr.aria-disabled]=\"disabled()\"\r\n  [disabled]=\"disabled()\"\r\n  (click)=\"onToggle()\"\r\n  (keydown)=\"onKeyDown($event)\"\r\n  role=\"switch\"\r\n>\r\n  <span class=\"slider\"></span>\r\n</button>\r\n"
    },
    {
      "name": "ZenTagComponent",
      "id": "component-ZenTagComponent-5228e187c92b9212421b9a731ff7a0a9454a5fce400d56a32c5064c399c1f34718009176b252df35d2b32a63f44b1cf96d3c9c0a89438226dd6b322afd3ecc33",
      "file": "projects/cli/schematics/components/files/tag/tag.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "zen-tag",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content />",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [],
      "description": "<p>The <code>ZenTagComponent</code> is a reusable UI component designed to display a tag or label.\nIt allows for custom content to be projected inside the tag.</p>\n<b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;zen-tag&gt;...&lt;/zen-tag&gt;</code></pre></div><b>Example :</b><div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
      "rawdescription": "\n\nThe `ZenTagComponent` is a reusable UI component designed to display a tag or label.\nIt allows for custom content to be projected inside the tag.\n\n```html\n<zen-tag>...</zen-tag>\n```\n\n```html\n```\n",
      "type": "component",
      "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n/**\r\n * The `ZenTagComponent` is a reusable UI component designed to display a tag or label.\r\n * It allows for custom content to be projected inside the tag.\r\n *\r\n * ```html\r\n * <zen-tag>...</zen-tag>\r\n * ```\r\n *\r\n * @example <zen-tag>Simple tag</zen-tag>\r\n * @component\r\n * @selector `zen-tag`\r\n *\r\n * @license BSD-2-Clause\r\n * @author Konrad Stępień <kord.stp@gmail.com>\r\n * @link https://github.com/Kordrad/ng-zen\r\n */\r\n@Component({\r\n  selector: 'zen-tag',\r\n  standalone: true,\r\n  template: `<ng-content />`,\r\n  styleUrl: './tag.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ZenTagComponent {}\r\n",
      "styleUrl": "./tag.component.scss",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    }
  ],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "Attribute",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/badge.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div zenBadge style=\"background: lightgray;\r\n        height: 254px;\r\n        width: 254px;\r\n        border-radius: 16px;\">\r\n      <small topLeft>TOP-LEFT</small>\r\n      <small top>TOP</small>\r\n      <small topRight>TOP-RIGHT</small>\r\n      <small left>LEFT</small>\r\n      <small right>RIGHT</small>\r\n      <small bottomLeft>BOTTOM-LEFT</small>\r\n      <small bottom>BOTTOM</small>\r\n      <small bottomRight>BOTTOM-RIGHT</small>\r\n    </div>\r\n  `,\r\n  }),\r\n}"
      },
      {
        "name": "Avatar",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/badge.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "OnElement"
      },
      {
        "name": "AvatarWithATag",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "_AvatarWithTag"
      },
      {
        "name": "AvatarWithATag",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/badge.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "_AvatarWithTag"
      },
      {
        "name": "AvatarWithTag",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/tag.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ZenTagComponent, ZenAvatarComponent, ZenBadgeComponent],\r\n    }),\r\n  ],\r\n  render: () => ({\r\n    template: `\r\n      <zen-badge style=\"--zen-badge-offset: -4px\">\r\n        <zen-tag bottom>KS</zen-tag>\r\n        <zen-avatar src=\"https://github.com/Kordrad.png\" style=\"height: 64px; width: 64px\"/>\r\n      </zen-badge>`,\r\n  }),\r\n}"
      },
      {
        "name": "Checked",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/switch.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <zen-switch [ngModel]=\"true\" />\r\n      <br/>\r\n      <zen-switch [checked]=\"true\" />\r\n    `,\r\n  }),\r\n}"
      },
      {
        "name": "Component",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/badge.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <zen-badge>\r\n      <small topLeft>TOP-LEFT</small>\r\n      <small top>TOP</small>\r\n      <small topRight>TOP-RIGHT</small>\r\n      <small left>LEFT</small>\r\n      <small right>RIGHT</small>\r\n      <small bottomLeft>BOTTOM-LEFT</small>\r\n      <small bottom>BOTTOM</small>\r\n      <small bottomRight>BOTTOM-RIGHT</small>\r\n      <img src=\"https://picsum.photos/200/200\"  alt=\"picsum\"/>\r\n    </zen-badge>\r\n  `,\r\n  }),\r\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n        <button zen-button>Test</button>\r\n    `,\r\n  }),\r\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/checkbox.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n        <zen-checkbox />\n        <zen-checkbox [checked]=\"true\" />\n        <zen-checkbox checked=\"mixed\" />\n    `,\n  }),\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/pin.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/switch.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n        <zen-switch />\r\n    `,\r\n  }),\r\n}"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/tag.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({ template: `<zen-tag>Zen Tag</zen-tag>` }),\r\n}"
      },
      {
        "name": "Diabled",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n        <button zen-button disabled>Test</button>\r\n    `,\r\n  }),\r\n}"
      },
      {
        "name": "Diabled",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/checkbox.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  render: () => ({\n    template: `\n        <zen-checkbox disabled=\"true\"/>\n        <zen-checkbox [checked]=\"true\" disabled=\"true\"/>\n        <zen-checkbox checked=\"mixed\" disabled=\"true\"/>\n\n    `,\n  }),\n}"
      },
      {
        "name": "Disabled",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/switch.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `<zen-switch [disabled]=\"true\" />`,\r\n  }),\r\n}"
      },
      {
        "name": "Emoji",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/badge.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ZenAvatarComponent, ZenBadgeComponent],\r\n    }),\r\n  ],\r\n  render: () => ({\r\n    template: `\r\n      <zen-badge style=\"--zen-badge-offset: -4px\">\r\n        <zen-avatar src=\"https://picsum.photos/33\" />\r\n        <b topRight>💬</b>\r\n      </zen-badge>\r\n    `,\r\n  }),\r\n}"
      },
      {
        "name": "Image",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  args: {\r\n    src: 'https://picsum.photos/32',\r\n  },\r\n}"
      },
      {
        "name": "OnElement",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/pin.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [ZenPinComponent, ZenAvatarComponent, ZenBadgeComponent],\n    }),\n  ],\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; --zen-badge-offset: -4px\">\n        <zen-badge>\n          <zen-pin topRight style=\"background-color: #2a912a; border: 2px solid white\"/>\n          <zen-avatar src=\"https://picsum.photos/32\" />\n        </zen-badge>\n\n        <zen-badge>\n          <zen-pin bottomRight style=\"background-color: #c42929; border: 2px solid white\"/>\n          <zen-avatar style=\"color:white\">AB</zen-avatar>\n        </zen-badge>\n      </div>\n     `,\n  }),\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n}"
      },
      {
        "name": "StreamAttribute",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/pin.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [ZenPinComponent, ZenAvatarComponent, ZenBadgeComponent],\n    }),\n  ],\n  args: {\n    stream: true,\n  },\n  render: args => ({\n    template: `\n        <zen-badge style=\"--zen-badge-offset: -4px\">\n          <zen-pin ${args.stream ? 'stream' : ''} topRight style=\"border: 2px solid white\"/>\n          <zen-avatar src=\"https://github.com/Kordrad.png\" />\n        </zen-badge>\n     `,\n  }),\n}"
      },
      {
        "name": "Text",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story",
        "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; color:white\">\r\n        <zen-avatar>MI</zen-avatar>\r\n        <zen-avatar>IB</zen-avatar>\r\n        <zen-avatar>WP</zen-avatar>\r\n        <zen-avatar>AI</zen-avatar>\r\n      </div> `,\r\n  }),\r\n}"
      },
      {
        "name": "WithBadge",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/cli/stories/components/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "OnElement"
      }
    ],
    "functions": [],
    "typealiases": [
      {
        "name": "CheckedState",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "boolean | \"mixed\"",
        "file": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 192
      },
      {
        "name": "OnChangeFn",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 184
      },
      {
        "name": "OnChangeFn",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "projects/cli/schematics/components/files/switch/zen-switch.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 184
      },
      {
        "name": "OnTouchedFn",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 184
      },
      {
        "name": "OnTouchedFn",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "projects/cli/schematics/components/files/switch/zen-switch.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 184
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenAvatarComponent>",
        "file": "projects/cli/stories/components/avatar.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenBadgeComponent>",
        "file": "projects/cli/stories/components/badge.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenButtonComponent>",
        "file": "projects/cli/stories/components/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenCheckboxComponent>",
        "file": "projects/cli/stories/components/checkbox.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenPinComponent>",
        "file": "projects/cli/stories/components/pin.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenSwitchComponent>",
        "file": "projects/cli/stories/components/switch.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      },
      {
        "name": "Story",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "StoryObj<ZenTagComponent>",
        "file": "projects/cli/stories/components/tag.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 183
      }
    ],
    "enumerations": [],
    "groupedVariables": {
      "projects/cli/stories/components/badge.stories.ts": [
        {
          "name": "Attribute",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/badge.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <div zenBadge style=\"background: lightgray;\r\n        height: 254px;\r\n        width: 254px;\r\n        border-radius: 16px;\">\r\n      <small topLeft>TOP-LEFT</small>\r\n      <small top>TOP</small>\r\n      <small topRight>TOP-RIGHT</small>\r\n      <small left>LEFT</small>\r\n      <small right>RIGHT</small>\r\n      <small bottomLeft>BOTTOM-LEFT</small>\r\n      <small bottom>BOTTOM</small>\r\n      <small bottomRight>BOTTOM-RIGHT</small>\r\n    </div>\r\n  `,\r\n  }),\r\n}"
        },
        {
          "name": "Avatar",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/badge.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "OnElement"
        },
        {
          "name": "AvatarWithATag",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/badge.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "_AvatarWithTag"
        },
        {
          "name": "Component",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/badge.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n    <zen-badge>\r\n      <small topLeft>TOP-LEFT</small>\r\n      <small top>TOP</small>\r\n      <small topRight>TOP-RIGHT</small>\r\n      <small left>LEFT</small>\r\n      <small right>RIGHT</small>\r\n      <small bottomLeft>BOTTOM-LEFT</small>\r\n      <small bottom>BOTTOM</small>\r\n      <small bottomRight>BOTTOM-RIGHT</small>\r\n      <img src=\"https://picsum.photos/200/200\"  alt=\"picsum\"/>\r\n    </zen-badge>\r\n  `,\r\n  }),\r\n}"
        },
        {
          "name": "Emoji",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/badge.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ZenAvatarComponent, ZenBadgeComponent],\r\n    }),\r\n  ],\r\n  render: () => ({\r\n    template: `\r\n      <zen-badge style=\"--zen-badge-offset: -4px\">\r\n        <zen-avatar src=\"https://picsum.photos/33\" />\r\n        <b topRight>💬</b>\r\n      </zen-badge>\r\n    `,\r\n  }),\r\n}"
        }
      ],
      "projects/cli/stories/components/avatar.stories.ts": [
        {
          "name": "AvatarWithATag",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "_AvatarWithTag"
        },
        {
          "name": "Image",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  args: {\r\n    src: 'https://picsum.photos/32',\r\n  },\r\n}"
        },
        {
          "name": "Text",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <div style=\"display: flex; gap: 1rem; color:white\">\r\n        <zen-avatar>MI</zen-avatar>\r\n        <zen-avatar>IB</zen-avatar>\r\n        <zen-avatar>WP</zen-avatar>\r\n        <zen-avatar>AI</zen-avatar>\r\n      </div> `,\r\n  }),\r\n}"
        },
        {
          "name": "WithBadge",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "OnElement"
        }
      ],
      "projects/cli/stories/components/tag.stories.ts": [
        {
          "name": "AvatarWithTag",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/tag.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [ZenTagComponent, ZenAvatarComponent, ZenBadgeComponent],\r\n    }),\r\n  ],\r\n  render: () => ({\r\n    template: `\r\n      <zen-badge style=\"--zen-badge-offset: -4px\">\r\n        <zen-tag bottom>KS</zen-tag>\r\n        <zen-avatar src=\"https://github.com/Kordrad.png\" style=\"height: 64px; width: 64px\"/>\r\n      </zen-badge>`,\r\n  }),\r\n}"
        },
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/tag.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({ template: `<zen-tag>Zen Tag</zen-tag>` }),\r\n}"
        }
      ],
      "projects/cli/stories/components/switch.stories.ts": [
        {
          "name": "Checked",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/switch.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n      <zen-switch [ngModel]=\"true\" />\r\n      <br/>\r\n      <zen-switch [checked]=\"true\" />\r\n    `,\r\n  }),\r\n}"
        },
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/switch.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n        <zen-switch />\r\n    `,\r\n  }),\r\n}"
        },
        {
          "name": "Disabled",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/switch.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `<zen-switch [disabled]=\"true\" />`,\r\n  }),\r\n}"
        }
      ],
      "projects/cli/stories/components/button.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n        <button zen-button>Test</button>\r\n    `,\r\n  }),\r\n}"
        },
        {
          "name": "Diabled",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\r\n  render: () => ({\r\n    template: `\r\n        <button zen-button disabled>Test</button>\r\n    `,\r\n  }),\r\n}"
        }
      ],
      "projects/cli/stories/components/checkbox.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/checkbox.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n        <zen-checkbox />\n        <zen-checkbox [checked]=\"true\" />\n        <zen-checkbox checked=\"mixed\" />\n    `,\n  }),\n}"
        },
        {
          "name": "Diabled",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/checkbox.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  render: () => ({\n    template: `\n        <zen-checkbox disabled=\"true\"/>\n        <zen-checkbox [checked]=\"true\" disabled=\"true\"/>\n        <zen-checkbox checked=\"mixed\" disabled=\"true\"/>\n\n    `,\n  }),\n}"
        }
      ],
      "projects/cli/stories/components/pin.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/pin.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{}"
        },
        {
          "name": "OnElement",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/pin.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [ZenPinComponent, ZenAvatarComponent, ZenBadgeComponent],\n    }),\n  ],\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem; --zen-badge-offset: -4px\">\n        <zen-badge>\n          <zen-pin topRight style=\"background-color: #2a912a; border: 2px solid white\"/>\n          <zen-avatar src=\"https://picsum.photos/32\" />\n        </zen-badge>\n\n        <zen-badge>\n          <zen-pin bottomRight style=\"background-color: #c42929; border: 2px solid white\"/>\n          <zen-avatar style=\"color:white\">AB</zen-avatar>\n        </zen-badge>\n      </div>\n     `,\n  }),\n}"
        },
        {
          "name": "StreamAttribute",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/stories/components/pin.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story",
          "defaultValue": "{\n  decorators: [\n    moduleMetadata({\n      imports: [ZenPinComponent, ZenAvatarComponent, ZenBadgeComponent],\n    }),\n  ],\n  args: {\n    stream: true,\n  },\n  render: args => ({\n    template: `\n        <zen-badge style=\"--zen-badge-offset: -4px\">\n          <zen-pin ${args.stream ? 'stream' : ''} topRight style=\"border: 2px solid white\"/>\n          <zen-avatar src=\"https://github.com/Kordrad.png\" />\n        </zen-badge>\n     `,\n  }),\n}"
        }
      ],
      "projects/cli/.storybook/preview.ts": [
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/cli/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n}"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {
      "projects/cli/schematics/components/files/checkbox/checkbox.component.ts": [
        {
          "name": "CheckedState",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "boolean | \"mixed\"",
          "file": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 192
        },
        {
          "name": "OnChangeFn",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 184
        },
        {
          "name": "OnTouchedFn",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 184
        }
      ],
      "projects/cli/schematics/components/files/switch/zen-switch.component.ts": [
        {
          "name": "OnChangeFn",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "projects/cli/schematics/components/files/switch/zen-switch.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 184
        },
        {
          "name": "OnTouchedFn",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "projects/cli/schematics/components/files/switch/zen-switch.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 184
        }
      ],
      "projects/cli/stories/components/avatar.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenAvatarComponent>",
          "file": "projects/cli/stories/components/avatar.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/stories/components/badge.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenBadgeComponent>",
          "file": "projects/cli/stories/components/badge.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/stories/components/button.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenButtonComponent>",
          "file": "projects/cli/stories/components/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/stories/components/checkbox.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenCheckboxComponent>",
          "file": "projects/cli/stories/components/checkbox.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/stories/components/pin.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenPinComponent>",
          "file": "projects/cli/stories/components/pin.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/stories/components/switch.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenSwitchComponent>",
          "file": "projects/cli/stories/components/switch.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ],
      "projects/cli/stories/components/tag.stories.ts": [
        {
          "name": "Story",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "StoryObj<ZenTagComponent>",
          "file": "projects/cli/stories/components/tag.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 183
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 18,
    "status": "low",
    "files": [
      {
        "filePath": "projects/cli/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/schematics/components/files/avatar/avatar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenAvatarComponent",
        "coveragePercent": 100,
        "coverageCount": "2/2",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/schematics/components/files/badge/badge.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenBadgeComponent",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/schematics/components/files/button/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenButtonComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/schematics/components/files/checkbox/checkbox.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenCheckboxComponent",
        "coveragePercent": 84,
        "coverageCount": "11/13",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/schematics/components/files/pin/pin.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenPinComponent",
        "coveragePercent": 66,
        "coverageCount": "2/3",
        "status": "good"
      },
      {
        "filePath": "projects/cli/schematics/components/files/switch/zen-switch.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenSwitchComponent",
        "coveragePercent": 100,
        "coverageCount": "7/7",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/schematics/components/files/tag/tag.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ZenTagComponent",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/cli/stories/components/avatar.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AvatarWithATag",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/avatar.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Image",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/avatar.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Text",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/avatar.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "WithBadge",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/badge.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Attribute",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/badge.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Avatar",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/badge.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AvatarWithATag",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/badge.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Component",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/badge.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Emoji",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Diabled",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/checkbox.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/checkbox.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Diabled",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/pin.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/pin.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "OnElement",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/pin.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "StreamAttribute",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/switch.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Checked",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/switch.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/switch.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Disabled",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/tag.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "AvatarWithTag",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/cli/stories/components/tag.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
